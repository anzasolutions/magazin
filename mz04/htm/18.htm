<html><head><meta http-equiv=Content-Type content="text/html; charset=iso-8859-2"><link rel=stylesheet href="magazin.css" TYPE="text/css"><title>MagaZin #4 :: wrzesieñ 2001</title></head><body link=478DE7 vlink=478DE7 alink=478DE7 topmargin=0 bottommargin=0 bgcolor="#000000"><div align=center><center><table border=0 width=700 cellspacing=0 cellpadding=0 height=1 bgcolor="#FFFFFF"><tr><td width=697 height=154 valign=top><img border=0 src="../img/up.png" width=700 height=150></td></tr></center><tr><td width=697 height=1 valign=top><table border=0 width=700 cellspacing=0 cellpadding=0 height=1 bgcolor="#FFFFFF"><tr><center><td width=697 height=1 valign=top></center><div align=center><center><table border=0 width="92%" cellspacing=0 cellpadding=4><tr><td width="10%" valign=middle><a href="17.htm"><img border=0 src="../img/4.gif" align=right width=50 height=25></a></td><td width="23%" valign=middle><font face=Arial size=1>poprzednia</font></td><td width="33%" valign=middle><p align=center><a href="spis.htm"><img border=0 src="../img/6.gif" width=200 height=20></a></td><td width="23%" valign=middle><p align=right><font size=1 face=Arial>nastêpna</font></td><td width="10%" valign=middle><a href="19.htm" class=link2><img border=0 src="../img/3.gif" width=50 height=25></a></td></tr></table></center></div></td></tr></table></td></tr><center><tr><td width=697 height=83 valign=top><div align=center><center><table border=0 width="92%" height=1 cellspacing=10 cellpadding=2><tr><td width="100%" height=5 valign=top colspan=2></td></tr><tr><td width="100%" height=16 valign=top bgcolor="#000000" colspan=2><img border=0 src="../img/13a.gif" width=225 height=14></td></tr><tr><td width="100%" height=1 valign=top colspan=2><font face=Arial size=2><br></font><div align=center><center><table border=0 width="100%" cellspacing=0 cellpadding=0><tr><td width="64%" valign=top height=30><font class=u>Linux: Bash, czyli standardowy shell, cz. 1</font></td></center></center></center><td width="36%" valign=top height=30><p align=right></td></tr></table></div><center><center></center></center></td></tr><tr><td width="50%" height=112 valign=top><p align=justify><font class=9pt><font color="#478DE7">$ _</font><br><br>Tak w³a¶nie wygl±da najbardziej elastyczny a tak¿e najwygodniejszy interfejs u¿ytkownika pod S³oñcem. Okay, bez przesady. Ale gdy dorzucimy jeszcze jaki¶ dobry, nortonopodobny mened¿er plików, Bash nie ma sobie równych.&nbsp;<br> Uwaga! Niniejszy opis jest si³± rzeczy do¶æ skrótowy, pe³en opis basha znajduje siê na stronach manuala systemowego info. Przegl±daæ go mo¿na po wydaniu polecenia info bash lub w RedHacie 7.0 pinfo bash. Program pinfo jest du¿o ³atwiejszy w obs³udze.&nbsp;<br> Poprzednio (m-zin #3) skoñczyli¶my na zainstalowaniu Linuksa. Je¿eli wszystko posz³o dobrze, powinni¶my zobaczyæ na ekranie co¶ takiego:&nbsp;<br><br><font color="#478DE7">Red Hat Linux release 7.0 (Guinness)<br> Kernel 2.4.0-test9 on an i586<br><br>localhost login: _</font><br><br>Bardziej spostrzegawczy byæ mo¿e zauwa¿± numer wersji RedHata - 7.0, podczas gdy miesi±c temu zainstalowali¶my 6.2. W ¶wiecie Linuksa miesi±c to szmat czasu, wszystko siê mo¿e zdarzyæ.<br> Ale do rzeczy. Jak zapewne ³atwo siê domy¶liæ, komputer czeka na wprowadzenie nazwy u¿ytkownika (loginu). Poniewa¿ w czasie instalacji utworzyli¶my konto zwyk³ego u¿ytkownika, wpisujemy teraz jego nazwê i wciskamy Enter (je¿eli nie, mo¿emy zalogowaæ siê na konto roota, ale stamt±d ³atwo mo¿emy co¶ spieprzyæ). Komputer wita nas znakiem zachêty:<br><br><font color="#478DE7">[twój_login@localhost aktualny_katalog]$ _</font><br><br>Poniewa¿ znak zachêty (prompt) mo¿na dowolnie modyfikowaæ, mo¿e zdarzyæ siê, ¿e komputer powita Ciê nieco inaczej. Je¶li zalogujesz siê jako root, ostatni znak prompta bêdzie mia³ postaæ # zamiast $. W tym miejscu mo¿emy zacz±æ wpisywaæ komendy systemu.<br><br><b>Jakie to komendy?</b><br><br>Komend± systemu jest np. dowolna nazwa pliku wykonywalnego. Je¶li program znajduje siê w katalogu wymienionym w zmiennej ¶rodowiskowej $PATH, nie trzeba podawaæ ca³ej ¶cie¿ki, wystarczy sama nazwa programu:<br><br><font color="#478DE7">[mac@localhost art3]$ uname<br> Linux<br> [mac@localhost art3]$ _</font><br><br>Bash u³atwia wpisywanie komend poprzez udostêpnianie kilku u¿ytecznych mechanizmów. Pierwszy to historia poleceñ zapamiêtuj±ca nawet polecenia wydane w poprzedniej sesji. Poruszamy siê po niej klawiszami strza³ek góra-dó³. Drugi to edycja linii komend - mo¿emy poruszaæ siê po niej strza³kami prawo-lewo, kasowaæ i dopisywaæ wedle woli. Wreszcie trzeci to tzw. tab-completion. Bash potrafi uzupe³niaæ czê¶ciowo wpisane nazwy poleceñ, ¶cie¿ek i zmiennych ¶rodowiskowych po naci¶niêciu klawisza Tab. Dwukrotne wci¶niêcie tego klawisza powoduje wypisanie listy mo¿liwych uzupe³nieñ w przypadku niejednoznaczno¶ci rozwiniêcia. Np. wpisanie cd /u&lt;Tab&gt;loc&lt;Tab&gt;b&lt;Tab&gt; spowoduje wpisanie polecenia cd /usr/local/bin/ chyba, ¿e po drodze wyst±pi± niejednoznaczno¶ci. Te cechy powoduj±, ¿e u¿ywanie basha w niczym nie przypomina drogi przez mêkê jak± jest korzystanie z DOSowego command.com'a.<br> Wiêkszo¶æ programów udostêpnia krótki spis swoich opcji po uruchomieniu z opcj± --help (lub -h):&nbsp;<br><br><font color="#478DE7">[mac@localhost art3]$ uname --help<br> Usage: uname [OPTION]...<br> Print certain system information. With no OPTION, same as -s.<br><br>-a, --all print all information<br> -m, --machine print the machine (hardware) type<br> -n, --nodename print the machine's network node hostname<br> -r, --release print the operating system release<br> -s, --sysname print the operating system name<br> -p, --processor print the host processor type<br> -v print the operating system version<br> --help display this help and exit<br> --version output version information and exit<br><br>Report bugs to &lt;bug-sh-utils@gnu.org&gt;.<br> [mac@localhost art3]$ _</font><br><br>Je¿eli taka informacja jest niewystarczaj±ca, wystarczy wydaæ polecenie man nazwa_polecenia np. man uname aby wy¶wietliæ tzw. stronê manuala dotycz±c± danego polecenia. W RedHacie 7.0 dostêpne s± polskie wersje manuali dla wiêkszo¶ci poleceñ.&nbsp;<br> Poniewa¿ celem tego artyku³u nie jest opis wszystkich poleceñ Linuksa (których jest ok. 3 tysiêcy w dystrybucji RH 7.0), skrótowo przebiegniemy siê po kilku, aby¶ mia³ od czego zacz±æ. I pamiêtaj, man twoim przyjacielem :-)&nbsp;<br> - <font color="#478DE7">cd</font> umo¿liwia wêdrowanie po drzewie katalogów&nbsp;<br> - <font color="#478DE7">ls</font> drukuje zawarto¶æ katalogu. Opcje ls -l - ,,d³ugi'' format, m.in. rozmiar pliku; ls -a - drukuje tak¿e pliki ,,ukryte'', zaczynaj±ce siê od kropki.<br> - <font color="#478DE7">cp</font>, <font color="#478DE7">mv</font> - odpowiednio kopiuje i przenosi pliki&nbsp;<br> - <font color="#478DE7">rm</font> kasuje pliki, <font color="#478DE7">rm -r</font> kasuje katalogi z zawarto¶ci±&nbsp;<br> - <font color="#478DE7">mkdir</font> zak³ada katalog&nbsp;<br> - <font color="#478DE7">vi</font> uruchamia edytor tekstu vi&nbsp;<br> - <font color="#478DE7">mc</font> uruchamia Midnight Commander, czyli bardzo rozbudowany klon Nortona Commandera&nbsp;<br> - <font color="#478DE7">startx</font> startuje sesjê X Window System&nbsp;<br> - <font color="#478DE7">logout</font> jak ju¿ siê znudzimy&nbsp;<br> - <font color="#478DE7">poweroff</font> jak siê naprawdê znudzimy... No i mamy ATX'a... Albo laptopa<br> Powinno Ci to wystarczyæ na pocz±tek. Inne polecenia bêd± wprowadzane w miarê omawiania bardziej zaawansowanych funkcji basha.<br><br><b>Przekierowania i potoki</b><br><br>Przekierowaniem (redirect) nazywamy zmianê wyj¶cia i/lub wej¶cia programu na plik. Dokonuje siê tego za pomoc± operatorów &gt; oraz &lt;. Przyk³adowo polecenie ls -l &gt; katalog.txt spowoduje zapisanie zawarto¶ci aktualnego katalogu do pliku katalog.txt (oczywi¶cie musimy mieæ prawo zapisu do tego pliku, ale to umiemy przecie¿ ju¿ sprawdziæ). Podobnie polecenie sort &lt; katalog.txt spowoduje posortowanie ¶wie¿o utworzonego pliku i wypisanie go na ekranie. Operatory mo¿na ³±czyæ i w ten sposób uzyskaæ zarówno zapis jak i odczyt z pliku, np grep ala &lt; plik1 &gt; plik2 spowoduje przepisanie z plik1 do plik2 wszystkich linii zawieraj±cych ci±g ,,ala''. Aby dopisaæ dane na koñcu pliku, a nie zamazaæ go, nale¿y u¿yæ operatora &gt;&gt;. Pamiêtajmy, ¿e ka¿de urz±dzenie te¿ jest plikiem, wiêc mo¿emy wydaæ polecenie ls &gt; /dev/modem abstrahuj±c od tego, czy ma ono sens, czy te¿ nie. Czêsto wykorzystuje siê ten fakt do zapobie¿enia wyrzucaniu przez aplikacjê nadmiernej ilo¶ci komunikatów, przekierowuj±c jej wyj¶cie na /dev/null<br><br></font><td width="50%" height=93 valign=top><p align=justify><font class=9pt>A teraz proste æwiczenie:&nbsp;<br><br><font color="#478DE7">[mac@localhost art3]$ ls -j >test<br> ls: invalid option -- j<br> U¿yj `ls --help' dla uzyskania informacji.<br> [mac@localhost art3]$ cat test<br> [mac@localhost art3]$ _</font><br><br>Dlaczego informacja nie zosta³a zapisana do pliku, a pojawi³a siê na ekranie? W tym miejscu trzeba napisaæ wreszcie o trzech strumieniach wej¶cia/wyj¶cia: stdin, stdout i stderr.&nbsp;<br> - <font color="#478DE7">stdin</font> to tzw. standardowe wej¶cie. Domy¶lnie jest ono skojarzone z klawiatur± naszego terminala (lub klawiatur± komputera, je¶li pracujemy lokalnie)&nbsp;<br> - <font color="#478DE7">stdout </font>- standardowe wyj¶cie. Domy¶lnie ekran.&nbsp;<br> - <font color="#478DE7">stderr</font> - standardowe po¶wiêcone komunikatom o b³êdach. Domy¶lnie równie¿ ekran.&nbsp;<br> Ju¿ zapewne domy¶lacie siê, które strumienie przekierowuj± operatory &lt; i > i dlaczego komunikat o b³êdzie nie wyl±dowa³ w pliku? Jak zatem wygl±da operator przekierowania dla standardowego b³êdu?&nbsp;<br><br><font color="#478DE7">[mac@localhost art3]$ ls -j 2>test<br> [mac@localhost art3]$ cat test<br> ls: invalid option -- j<br> U¿yj `ls --help' dla uzyskania informacji.<br> [mac@localhost art3]$ _</font><br><br>Widaæ ró¿nicê? Mo¿na te¿ przekierowaæ zarówno stdout jak i stderr do tego samego pliku przy pomocy operatora >&amp;&nbsp;<br> Wiemy ju¿ na czym polega przekierowanie. Czym zatem jest potok?&nbsp;<br> Potok ³±czy standardowe wyj¶cie jednego programu ze standardowym wej¶ciem drugiego. S³u¿y do tego operator |. Mo¿na w ten sposób po³±czyæ dowoln± liczbê programów w d³ugi ,,potok'' przetwarzaj±cy informacje:&nbsp;<br><br><font color="#478DE7">[mac@localhost art3]$ cat plik | grep -v ala | tr ' ' _ | sed "s/--*/-/g" | sort | uniq</font><br><br>Polecenie to wyrzuca na ekran plik wybieraj±c z niego linie nie zawieraj±ce ci±gu ,,ala'', zamieniaj±c spacje na podkre¶lenia, zamieniaj±c wielokrotne ci±gi znaków ,,-'' (np ---) na pojedyncze, sortuj±c linie i usuwaj±c duplikaty. OK, przyk³ad jest naci±gany, ale ³±cz±c w ten sposób komendy da siê budowaæ jak z klocków fantastyczne filtry tekstowe, konwertery plików itp.<br><br><b>Backtick czyli `</b><br><br>Uwaga, nie myliæ z apostrofem! Backtick znajduje siê na jednym klawiszu z tyld±. Standardowe wyj¶cie polecenia umieszczonego pomiêdzy znakami `` zostanie wstawione do linii polecenia w miejscu wywo³ania. Sztandarowy przyk³ad:&nbsp;<br><br><font color="#478DE7">[mac@localhost art3]$ ldd `which ls`<br> libtermcap.so.2 => /lib/libtermcap.so.2 (0x40025000)<br> libc.so.6 => /lib/libc.so.6 (0x40029000)<br> /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)<br> [mac@localhost art3]$ _&nbsp;</font><br><br>Co siê sta³o? Przeanalizujmy po kolei: Polecenie ldd bierze za swój argument nazwê pliku wykonywalnego i podaje z jakich bibliotek program korzysta. Niestety, ldd nie potrafi przeszukaæ ¶cie¿ki $PATH i wymaga podania nazwy programu z ca³± ¶cie¿k±. Polecenie which przeszukuje ¶cie¿kê i podaje pe³n± nazwê programu podanego jako parametr. Spróbujmy:&nbsp;<br><br><font color="#478DE7">[mac@localhost art3]$ which ls<br> /bin/ls<br> [mac@localhost art3]$ _</font><br><br>Zatem polecenie ldd `which ls` zostanie rozwiniête do postaci ldd /bin/ls. I o to chodzi³o!<br><br><b>Wildcards czyli specjalne znaki * i ?</b><br><br>Znaki te u¿yte w linii komend rozwijaj± siê w listê plików. * zastêpuje dowolny ci±g znaków w nazwie pliku (tak¿e kropkê), a ? zastêpuje dowoln± literê. Tak wiêc ls * powoduje wypisanie listy wszystkich plików z aktualnego katalogu, mpg123 *a*.mp3 powoduje odegranie wszystkich plików MP3 zawieraj±cych w nazwie literkê a, ls ???.* spowoduje wypisanie wszystkich plików o nazwie zaczynaj±cej siê od trzech znaków i kropki. I tak dalej, w dowolnych konfiguracjach.<br><br><b>Wywo³ywanie kilku komend w jednej linii</b><br><br>Bash umo¿liwia wywo³anie kilku komend z jednego wiersza poleceñ. Polecenia mog± byæ wywo³ywane równocze¶nie, sekwencyjnie lub warunkowo. Mog± byæ równie¿ grupowane. Wykonanie równoczesne nastêpuje w przypadku poleceñ rozdzielonych znakiem &amp;. W ten sam sposób mo¿na zapu¶ciæ polecenie ,,w tle'' tzn. powrót do linii komend nastêpuje natychmiast, nie za¶ po zakoñczeniu wykonywania programu. W tym celu koñczymy wiersz polecenia znakiem &amp;. Wykonanie sekwencyjne (nastêpne dopiero po zakoñczeniu poprzedniego) nastêpuje w wypadku rozdzielenia komend ¶rednikiem ;. Wykonanie warunkowe oznacza wykonanie kolejnej komendy tylko je¶li poprzednia zakoñczy³a siê sukcesem (pora¿k±). Polecenia rozdzielamy znakiem &amp;&amp; (||). Sztandarowy przyk³ad to make &amp;&amp; make install powoduj±cy zainstalowanie programu, gdy jego kompilacja zakoñczy siê sukcesem lub make || echo -e \\a powoduj±cy wygenerowanie krótkiego tonu w wypadku b³êdu kompilacji. Komendy mo¿na ³±czyæ w nawiasach np. (make &amp;&amp; make install) &amp; mpg123 muzyka.mp3 powoduj±cy umilenie kompilacji (i byæ mo¿e instalacji) odgrywaniem pliku MP3. Czasem, gdy komenda puszczona w tle wypisuje co¶ na ekranie, mo¿e doj¶æ do jej zatrzymania. Dlatego byæ mo¿e warto przekierowywaæ wyj¶cie komend uruchamianych w tle na /dev/null.&nbsp;<br><br><b>Job control<br></b><br>Czyli kontrola zadañ. Linux umo¿liwia zawieszenie dowolnego programu (prawie dowolnego, program mo¿e zablokowaæ tê mo¿liwo¶æ) klawiszem Control-Z lub zatrzymanie go kombinacj± Control-C. Programy zawieszone pozostaj± w tym stanie a¿ do uaktywnienia ich b±d¼ komend± fg przywracaj±c± normalne dzia³anie programu b±d¼ bg powoduj±c± kontynuacjê wykonania programu w tle. Na zawieszonych lub wykonywanych w tle programach mo¿na wykonywaæ inne operacje. Generalnie do takich programów odwo³ujemy siê przez ich numery nadawane przez basha. Do wy¶wietlenia tych numerów s³u¿y komenda jobs. Komendy mo¿na przywo³ywaæ fg %numer, wysy³aæ w t³o bg %numer lub zabijaæ kill %numer. fg oraz bg bez parametrów operuj± na ostatnio zawieszonym procesie.<br></font><p align=right><font class=9pt>ci±g dalszy w nastêpnym numerze... <br><br></font></tr><tr><td width="100%" height=1 valign=top colspan=2><p align=right><font class=9pt><b>Loopus</b> oprac. na podstawie artyku³u znalezionego w Sieci<a href="mailto:lupusfm@poczta.onet.pl&nbsp;" class=link><br> lupusfm@poczta.onet.pl</a></font></tr><tr><td width="100%" height=1 valign=middle colspan=2 bgcolor="#000000"><b><font face=Verdana color="#FFFFFF" size=1>&nbsp;Copyright &copy; MagaZin 2001</font></b></td></tr></table><table border=0 width="92%" height=1 cellspacing=10 cellpadding=2><center></table></div></center></td></tr></table></div></body></html>